---
title: "Documentos Reproducibles con Rmarkdown (slides)"
author: "Antonio J. Pérez-Luque"
institute: Instituto de Ciencias Forestales (CIFOR) | INIA-CSIC (Madrid)
date: 2024-01-18
format: 
  revealjs:
    auto-stretch: false 
    logo: "images/logo-ugr.png"
    footer: Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad
    theme: [default, "../../custom_theme.scss"] 
    transition: fade
    background-transition: fade
    highlight-style: a11y
code-link: true
crossref:
  fig-title: Figura     # (default is "Figure")
  tbl-title: Tabla     # (default is "Table")
  title-delim: .     # (default is ":")
  fig-prefix: Figura
  tbl-prefix: Tabla
  ref-hyperlink: true
  sec-prefix: ""
  sec-labels: alpha
---

# Introducción {.unnumbered}

- En este tutorial vamos a aprender a crear documentos dinámicos y reproducibles con R y Rmarkdown (`Rmd`). 

- Vamos a trabajar con [R](https://www.r-project.org/), Rstudio (ahora llamado [posit](https://posit.co/)), y utilizaremos al menos el paquete [`rmarkdown`](https://rmarkdown.rstudio.com/).


----------------------


![Esquema general de `Rmd`. Fuente: [\@allison_horst](https://allisonhorst.com/allison-horst)](images/rmd-allison.png){#fig-rmd-allison}

# Flujo de Trabajo

1.  Crear archivo `.Rmd`
2.  Escribir encabezado YAML
3.  Escribir texto y código
4.  Renderizar (`Knit`)

![](images/rmd-workflow.png)

## Crear un archivo `.Rmd`

Dentro de R-Studio, haz clic en **Archivo → Nuevo archivo → Rmarkdown** 

::: {.r-stack #fig-crea-rmd}
![Crea archivo `Rmd`](images/rmd-create.png){.fragment height="370" #fig-create-rmd}

![Define detalles generales `Rmd`](images/rmd-create2.png){.fragment height="370" #fig-create-rmd-details}

Crea archivo `Rmd`
:::

# Estructura de un archivo `Rmd`

## Encabezado YAML

::: small
[YAML](https://yaml.org/), es un lenguaje de serialización de datos para todos los lenguajes de programación. Se diseño para representar datos jerárquicos pero que sea fácil de escribir y leer por humanos.

- Delimitado por tres guiones (`---`) al inicio y al final (a modo de bloque)
- Estructura anidada
- Contiene metadatos del documento: título del documento, autor, los formatos de salida, etc)
::: 

::: {#fig-yaml layout-ncol="2" layout-valign="bottom"}
![Encabezado YAML](images/ymal-example.png){#fig-ymal-example}

![Vista tras su renderización](images/ymal-render.png){#fig-yaml-render}

Encabezado YAML
:::

------------------------------

Existen diferenes parámetros que se pueden especificar en el encabezado YAML, que van a definir algunas características del documento.

-   `title`: Título del documento
-   `author`: Autor del documento
-   `output`: Formatos de salida del documento (`pdf`, `word`, `html`, etc). Mas información [aquí](https://rmarkdown.rstudio.com/lesson-9.html)
-   `date`: Fecha del documento

------------------------------

Algunos parámetros van a estar condicionados por el tipo de formato de salida. Por ejemplo:

-   `toc`: `true` Mostrar la tabla de contenidos cuando la salida sea de tipo html.
-   También podemos especificar una plantilla de word.

``` yaml
---
output:
  word_document:
    reference_docx: "template.docx"
---
```

------------------------------

::: small
Existen diferentes formatos de salida de documentos. En el ejemplo (@fig-yaml) hemos usado `html`, pero podemos especificar diferentes formatos de salida (`word`, `pdf`, presentaciones, etc.). Cada tipo de documento de salida presenta diferentes parámetros que se pueden especificar en la cabecera YAML. Por ejemplo, para saber qué parámetros puedes definir con `html_document`, podemos usar el comando `?rmarkdown::html_document`. Así, por ejemplo:
:::

```{r}
#| eval: false
?rmarkdown::word_document
```

``` r
word_document(
  toc = FALSE,
  toc_depth = 3,
  number_sections = FALSE,
  fig_width = 5,
  fig_height = 4,
  fig_caption = TRUE,
  highlight = "default",
  reference_docx = "default",
)
```

## Narrativa (Texto del documento)
::: small
Esta parte del documento se utiliza para describir diferentes aspectos de nuestro trabajo: el resumen, una introducción, la motivación del trabajo, metodologías, resultados, etc. En un documento `.Rmd` todo lo que no esté en el encabezazo YAML o dentro de un `chunk` de código, será interpretado como texto.

Para escribir la parte narrativa se utiliza el lenguaje [Markdown](https://es.wikipedia.org/wiki/Markdown), que no es mas que una colección simple de convenciones para dar formato a archivos de texto plano. Está diseñado para que sea fácil de leer, de escribir y también de aprender. En la siguiente tabla tienes algunos ejemplos de como es la sintáxis markdown.
:::

------------------------------


| Formato  | Sintáxis                          | Ejemplo                                  |
|------------------|--------------------------|----------------------------|
| Cursiva  | `*Texto*`                         | *Esto es cursiva*                        |
| Negrita  | `**Negrita**`                     | **Esto es negrita**                      |
| Link     | `[Descripción del texto](url)`    | Un [link](http://www.github.com)         |
| Imágenes | `![Descripción](url a la imagen)` | Una imagen ![image](images/rmd-logo.png) |

------------------------------

### Encabezados 
Para crear encabezados de secciones y subsecciones has de utilizar el simbolo `#`. De tal forma:

``` md
# Título
## Sección principal
### Subsección
#### Sub-subsección
```
<br> 

### Superíndices, Subíndices 

- **superíndices** escribiendo `R^2^` que produce R^2^
- **subíndices**, escribiendo `CO~2~` que produce CO~2~.

------------------------------

### Ecuaciones

A veces puede interesarnos escribir **ecuaciones**. Para ello vamos a usar el lenguaje [LaTeX](http://www.latex-project.org/). Existen algunos editores online que nos permiten escribir ecuaciones usando LaTeX, como por ejemplo [este](https://latex.codecogs.com/eqneditor/editor.php).

------------------------------

::: small
Las ecuaciones pueden incluirse en la **misma línea**, para lo cual incluimos la ecuación entre simbolos `$...$`. Por ejemplo:

En nuestro estudio utilizamos una regresión de acuerdo a $y_i=a_i+b_iX$.

Para obtener esta ecuación hemos escrito `$y_i=a_i+b_iX$`

También podemos incluir ecuaciones mas complejas **en párrafo aparte** usando `$$...$$`. Por ejemplo para obtener $$y = \mu + \sum_{i=1}^p \beta_i x_i + \epsilon$$

escribimos <br>
`$$y = \mu + \sum_{i=1}^p \beta_i x_i + \epsilon$$`
:::

------------------------------

### Recursos sobre Markdown 

Existen muchos recursos en la web sobre sintáxis markdown: 

- [https://www.markdownguide.org/basic-syntax](https://www.markdownguide.org/basic-syntax)

- [https://quarto.org/docs/authoring/markdown-basics.html](https://quarto.org/docs/authoring/markdown-basics.html)


## Trozos de código (`chunks`)

::: small
Los trozos o bloques de código (`chunks`) dentro de un documento RMarkdown permiten ejecutar diferentes análisis y mostrar resultados en el documento final. Para distinguir los trozos de código del resto de elementos del documento `.Rmd` tenemos que indicar un tipo especial de marca.

Existen dos formas de incrustar código dentro de un documento `.Rmd`:

a.  **Código en línea:** Código breve que se incluye en una línea escrita del documento (generalmente no mas de una línea de código)

b.  **Bloques de código (`chunks`):** Partes del documento que incluyen varias líneas de código. Permiten represantar gráficos, tablas, aplicar análisis estadísticos, cargar paquetes, etc.
::: 

------------------------------

### a. Código R en línea

::: small
- Para incluir código en líneas hay que utilizar la siguiente sintaxis <br>
`` `r ` ``
<br> en la que incluiremos nuestro código después de la letra `r`. 

- Por ejemplo si escribimos: <br>la media de nuestro grupo es `` `r knitr::inline_expr('mean(c(1,3))')` `` <br> aparecerá como: <br>
la media de nuestro grupo es `r mean(c(1,3))`. 

De esta forma podemos incluir resultados de análisis (e.g. p.valor de un análisis) sin tener que copiarlos a mano, reduciendo la generación de errores.
:::

------------------------------

### b. Bloques de código (**chunks**)

::: small
Los trozos de código se pueden utilizar para representar la salida del código en los documentos o para mostrar el código para la ilustración. Los trozos de código pueden estar escritos en diferentes lenguajes (e.g.: `shell/bash`, `python`, `SQL`, `R`, etc.)

Para insertar un trozo de código en R, puedes escribirlo manualmente escribiendo ```` ```{r} ```` seguido de ```` ``` ```` en la siguiente línea. 
<br> 

````markdown
```{{r}}
n <- 5
seq(n)
```
````

Knitr interpreta ese trozo de texto como instrucciones de R, las ejecutará y mostrará los resultados como parte del documento.
::: 

------------------------------

::: small
En la siguiente animación (@fig-chunk-anatomy) puedes ver la anatomía de un trozo de código.
::: 

![Anatomía de un trozo de Código. Fuente: [Shannon Pileggi](https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-markdown/)](images/chunk-anatomy.gif){#fig-chunk-anatomy}

------------------------------

### ¿Cómo insertar un chunk de código?

Existen varias formas de insertar un chunk de código:

-   Usando "Insert" en la barra de Edición
-   Escribiendo manualmente ```` ```{r} ```` y ```` ``` ````
-   Usando un atajo de teclado:
    -   Ctrl + Alt + I (Windows)
    -   Cmd + Alt + I (OS)

------------------------------

### Opciones y nombres de los bloques
::: small
Cuando creamos un documento reproducible es importante identificar los diferentes trozos de código para poder ejecutarlos a lo largo de todo el documento. Esta aproximación tiene varias ventajas:

1.  Se puede navegar mas cómodamente a los bloques específicos usando el navegador de código desplegable abajo a la izquierda en el editor de script:
:::
![](images/code-navigation.png)

------------------------------

### Opciones y nombres de los bloques
::: small
2.  En caso de que el bloque de código produzca un gráfico, se usará el nombre del bloque para nomobrar los gráficos facilitando la reutilización de estos gráficos.

3.  Guardar bloques específicos de código complejo y costoso de ejecutar en la caché.

En nuestro ejemplo anterior podemos añadir el nombre del chunk como `1-numero-aleatorio`:

```{r 1-numero-aleatorio}
#| echo: fenced
n <- 5
seq(n)
```

Las salidas de los códigos pueden personalizarse con diferentes opciones. Estas opciones se suministran para cada uno de los chunks. Existen mas de 50 opciones de personalización que pueden ser consultadas [aquí](http://yihui.name/knitr/options/).

:::
------------------------------

### Principales opciones de los chunks 


-   `eval = FALSE` evita que el código sea evaluado. (Y, obviamente, si el código no es ejecutado no se generaran resultados). Esto es útil para mostrar códigos de ejemplo, o para deshabilitar un gran bloque de código sin comentar cada línea.

-   `include = FALSE` ejecuta el código, pero no muestra el código o los resultados en el documento final. Se puede usar para aligerar el aspecto final de nuestro documento.

-   `echo = FALSE` evita que se vea el código, pero sí muestra los resultados en el archivo final.

------------------------------

### Principales opciones de los chunks 


-   `message = FALSE` o `warning = FALSE` evita que aparezcan mensajes o advertencias en el archivo final.

-   `esults = 'hide'` oculta el output impreso

-   `fig.show = 'hide'` oculta los gráficos producidos

-   `error = TRUE` permite que se siga renderizando el documento a pesar de que exista un error en el código. Puede ser útil durante el proceso de creación de un documento reproducible

------------------------------

### Incluir Tablas

Un aspecto muy intersante de los documentos reproducibles es la inclusión de tablas. Para incluir una tabla existen diferentes opciones, siendo la función `knitr::kable` la que nos permite incluir tablas de la forma mas sencilla (mas información [aquí](https://bookdown.org/yihui/rmarkdown-cookbook/kable.html)). Así por ejemplo, si escribimos

<br>
````         
``` {{r}}
knitr::kable(
  mtcars[1:5, ]
)
```
````
obtenemos la @tbl-ejemplo-tabla

------------------------------

::: small
```{r}
#| label: tbl-ejemplo-tabla
#| tbl-cap: "Ejemplo de Tabla con `kable`"
#| echo: false
knitr::kable(
  mtcars[1:5, ]
)
```
::: 

## Tejer y Renderizar
::: small
- Al terminar nuestro`.Rmd` escrito procedemos a tejer (`knit`) el documento para que se ejecute el código y los resultados se incluyan dentro de nuestro documento.

- **Knit** es el verbo que describe la combinación de los trozos de código, el código en línea, el markdown y la narrativa. 

Para ello en la parte superior del panel, hacer click en `Knit` directamente o desplegar las opciones de `Knit` y ejecutar la que mas nos convenga (@fig-knit, ver animación en @fig-knitting).
::: 

![Opciones Knit](images/knit.png){#fig-knit}

---------------------------------

![Knit (Tejer) un documento. Fuente: [Shannon Pileggi](https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-markdown/)](images/knitting.gif){#fig-knitting}

## Resumen del Flujo de Trabajo

Resumen de los pasos que sigue RMarkdown para llegar al documento renderizado

::: {.incremental}
1.  Crear un informe `.Rmd` que incluya las especificaciones YAML, trozos de código R (`chunks`) y narraciones markdown

2.  Pasar el archivo `.Rmd` a `knitr` para que ejecute los trozos de código R y cree un nuevo archivo `.md`
  
::: small
  - [Knitr](http://yihui.name/knitr/) es un paquete dentro de R que permite la integración de código R en documentos RMarkdown renderizados como HTML, latex, pdf, word, entre otros tipos de documentos.
::: 
  
::: 

## Resumen del Flujo de Trabajo

Resumen de los pasos que sigue RMarkdown para llegar al documento renderizado

3.  El archivo `.md` generado se entrega a **pandoc**, que creará el documento final renderizado (por ejemplo, html, Microsoft word, pdf, etc.). [Pandoc](http://pandoc.org/) es un convertidor universal de documentos y permite la conversión de un tipo de documento (en este caso: `.Rmd`) a otro (en este caso: HTML)

![](images/rmd-workflow.png)

## Recursos {#sec-recursos}

::: small
-   [R for Data Science](https://es.r4ds.hadley.nz/r-markdown.html) en especial los capítulos 27 a 29 en su versión en castellano.

-   [R for Reproducible Scientific Analysis (RMarkdown / knitr)](https://reproducible-analysis-workshop.readthedocs.io/en/latest/6.RMarkdown-knitr.html)

-   [Reproducible reports with R markdown](https://intro2r.com/rmarkdown_r.html)

-   [R para Análisis Científicos Reproducibles](https://swcarpentry.github.io/r-novice-gapminder-es/15-knitr-markdown/index.html)

-   [Level up in R Markdown](https://allisonhorst.github.io/ucsb-qmss-rmarkdown/)

-   [Introducing RStudio and R Markdown](https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-markdown/)

-   [Curso de Introducción a R](https://www.uv.es/vcoll/RMarkdown.html)

-   [Escribir un Trabajo Fin de Estudios con R Markdown](http://destio.us.es/calvo/memoriatfe/MemoriaTFE_PedroLuque_2017Nov_imprimir2caras.pdf)

-   ... Existen muchos más

::: 

## ¿Alguna duda?

- [@ajpelu](https://twitter.com/ajpelu)
- [antonio.perez@inia.csic.es](mailto: antonio.perez@inia.csic.es)

::: small
Ayuda JDC2022-050056-I financiada por MCIN/AEI /10.13039/501100011033 y por la Unión Europea NextGenerationEU/PRTR
::: 

![](images/logo-jdc.png){fig-align="center"}
