---
title: "Control de Versiones con Git y GitHub"
author: 
  - name: "Antonio J. Pérez-Luque"
    orcid: 0000-0002-1747-0469
    email: antonio.perez@inia.csic.es
    affiliation: Instituto de Ciencias Forestales (CIFOR) | INIA-CSIC (Madrid)
date: 2025-01-20
sesion: 3
date-format: long
format: 
  revealjs: 
    multiplex: true
    logo: "images/logo-ugr.png"
    footer: Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad
    theme: [default, "../../custom_theme.scss"] 
    transition: fade
    background-transition: fade
    highlight-style: a11y
code-link: true
citation: true
---

# ¿Has experimentado alguna de estas situaciones en tu trabajo diario?

------------------------------------------------------------------------

![[phdcomic](http://phdcomics.com/)](images/final_doc.png)

------------------------------------------------------------------------

![[Scott Adams](https://scottadams.locals.com/)](images/tracker.png)

------------------------------------------------------------------------

![[phdcomic](http://phdcomics.com/)](images/astorytold.png)

## ¿Qué es el control de versiones?

El **control de versiones** es un sistema que registra los cambios realizados sobre un archivo o conjunto de archivos a lo largo del tiempo, de modo que podamos recuperar versiones específicas más adelante

-   Se puede utilizar sobre cualquier archivo.
-   Permite:
    -   Revertir archivos (proyecto) a un estado anterior
    -   Comparar cambios a lo largo del tiempo
-   Facilita la identificación de errores

## Registro de cambios

![](images/carp-changes.svg)

## Registro de cambios (varios usuarios) {.small}

![](images/carp-two-users.svg){fig-align="center"}

## Integración de cambios

![](images/carp-merge.svg){fig-align="center"}

## Sistemas para el control de versiones

![](images/git_logo.png){fig-align="center" height="251" width="600"}

-   [ProGit book](http://git-scm.com/book/en/v2)
-   Otros:
    -   [Subversion](https://subversion.apache.org/)
    -   Concurrent Version System [CVS](https://www.nongnu.org/cvs/)

## Git

-   Sistema avanzado de control de versiones distribuido
-   Permite **rastrear** el progreso de un proyecto mediante **capturas**
    -   **¿Qué cambios?**
    -   **¿Dónde?**
    -   **¿Quién los hizo?**
    -   **¿Por qué?**

------------------------------------------------------------------------

![[Devon Wijesinghe](https://wdevon99.medium.com/git-under-the-hood-26b46a47393c)](images/git-distributed.png)

## GitHub

::: columns
::: {.column width="60%"}
::: small
-   Un website donde alojar repositorios
-   Interfaz para explorar repositorios
-   Permite colaborar de una forma más eficaz:
    -   Compartir repositorio
    -   Ver cambios
    -   Corregir errores
    -   Discutir y Revisar cambios
:::
:::

::: {.column width="40%"}
![](images/github_logo.png){fig-align="center" height="300" width="350"}


<https://github.com/>
:::
:::

## Recursos sobre Git

::: small
- [Interactive Tutorial Git (CodeSchool)](https://try.github.io/levels/1/challenges/1)
- [Git - the simple guide (Roger Dudler)](http://rogerdudler.github.io/git-guide/index.es.html)
- [Git and GitHub (Hadley Wickham)](http://r-pkgs.had.co.nz/git.html)
- [A brief introduction to git & GitHub (Karl Broman & Samuel G. Younkin)](https://www.biostat.wisc.edu/~kbroman/talks/GitPrimer.pdf)
- [A basic tutorial to version control using git (Jon Lefcheck)](http://jonlefcheck.net/2013/11/04/a-basic-tutorial-to-version-control-using-git/)
- [Git/Github guide a minimal tutorial (Karl Broman)](http://kbroman.org/github_tutorial/)
- [Getting Git Right (Atlassian)](https://www.atlassian.com/git/tutorials/setting-up-a-repository)
- [Recopilación de tutoriales (F. Rodríguez-Sánchez)](https://gist.github.com/Pakillo/63c15c700c9c76fe8032)
- [Guía Visual de Git](https://marklodato.github.io/visual-git-guide/index-es.html)
- [Introducción al funcionamiento y uso de git y github](https://juancuiule.github.io/intro-a-git/) 
:::

## Ciclo de Git

```{r}
#| fig-align: 'center'
#| fig-cap: 'Artwork by [Allison_horst](https://github.com/allisonhorst)'
knitr::include_graphics("images/git-cycle-allison.png")
```

## Ciclo de Git

![[T. Meralus](https://meralus.com/git-pull-all/)](images/git-workflow.png)

## Instalar Git

::: small
-   Instala Git en tu ordenador. Puedes usar la [documentación oficial](https://git-scm.com/book/es/v2/Inicio---Sobre-el-Control-de-Versiones-Instalaci%C3%B3n-de-Git)
:::

#### Configurar Git

::: panel-tabset
## Código

``` bash
git config --global user.name 
git config --global user.email 
```

## Ejemplo

``` bash
git config --global user.name "Fulanito Menganito"
git config --global user.email micorreo@gmail.com
```
:::

::: small
::: callout-note
Vamos a usar Github, por tanto la dirección de correo que indiques ha de ser la misma con la que te registres en GitHub.
:::

-   En cualquier momento podemos ver las opciones de configuración

``` bash
git config --list
```
:::

## Crear un repositorio nuevo

-   Abre la [consola de comandos](https://linube.com/ayuda/articulo/174/abrir-una-consola-de-comandos)
-   Crea un directorio nuevo y ábrelo[^1]

[^1]: [Ayuda sobre comandos](http://overapi.com/linux/)

``` bash
mkdir <nombre_directorio>
```

<br>

``` bash
mkdir datos
cd datos
```

## Iniciar un repositorio

-   Para **iniciar un repositorio** utilizamos el comando

```{.r code-line-numbers="1"}
git init nombrerepositorio
git init mi_primer_repositorio
```

::: callout-note
¿Que ha ocurrido en nuestro directorio?
:::

- Inspeccionar el directorio

``` bash
cd mi_primer_repositorio
ls -a 
cd .git
```

## Añadir cambios

-   Crea un archivo de texto dentro del directorio, escribe algo y nómbralo **miarchivo.txt**

-   Añade el archivo a la **staging area**

``` bash
git add <nombre_archivo>
```

``` bash
git add miarchivo.txt
```

-   Si quiero añadir todos los archivos

``` bash
git add . 
```

## Registrar cambios

``` bash
git commit -m "Commit message""
```

::: callout-important
El mensaje nos servirá para indicar lo que hemos hecho.

-   [Recomendaciones](https://midu.dev/buenas-practicas-escribir-commits-git/) de buenas prácticas para commits
-   [Algunas convenciones para commits](https://www.conventionalcommits.org/en/v1.0.0/)
:::

``` bash
git commit -m "Escribo mis datos personales en archivo"
```

<br>

    [master (root-commit) 71fe224] Escribo mis datos personales en archivo
     1 file changed, 2 insertions(+)
     create mode 100644 miarchivo.txt

## 

![[Allison_horst](https://allisonhorst.com/git-github)](images/git-escalada.png)

## 

![[Allison_horst](https://allisonhorst.com/git-github)](images/git-escalada-caida.png)


## 

![[T. Meralus](https://meralus.com/git-pull-all/)](images/git-workflow.png)

## Enviar cambios a Repositorios Remotos

-   Nuestros cambios están en el **`HEAD`** (copia local)
-   Queremos enviar los cambios a un **repositorio remoto**

::: callout-caution
Necesitamos un repositorio remoto (GitHub):

-   Crear
-   Clonar
:::

``` bash
git remote add origin <url server>

git remote add origin https://github.com/ajpelu/teach_git_ejemplo.git
```

## Crear repositorio en GitHub

![](images/crea_repo.gif)


## 

![[Julen Astigarraga](https://github.com/Julenasti)](images/github-julen.jpeg)

## 

![[Julen Astigarraga](https://github.com/Julenasti)](images/github-julen2.jpeg)


## Enlazar repositorio local y remoto

<br> URL: <br> **https://github.com/ajpelu/teach_git_ejemplo.git**

<br>

``` bash
git remote add origin <url server>
git remote add origin https://github.com/ajpelu/teach_git_ejemplo.git
```

## Enviar

::: small
-   Para enviar cambios (una vez conectados) a un repositorio remoto
-   Nos pedirá usuario y contraseña
:::

``` bash
git push origin master
```

::: callout-warning
``` bash
git push origin
```

``` bash
git push origin master
```

[¿Qué rama queremos sincronizar?](https://www.geeksforgeeks.org/difference-between-git-push-origin-and-git-push-origin-master/)
:::

![](images/git-push.png){fig-align="center"}

## Clonar un repositorio

![](images/clon_repo.gif)

## Clonar un repositorio

-   Importante para reproducibilidad
-   Colaboración
-   Repositorio remoto (`GitHub`)
-   2 formas ([diferencias](https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git/))

::: panel-tabset
## HTTPS

``` bash
# git clone <url> 
git clone https://github.com/ajpelu/teach_git_ejemplo.git 
```

## SSH

``` bash
# git clone username@host:/path/to/repository
git clone git@github.com:ajpelu/teach_git_ejemplo.git 
```
:::

## Actualizar un repositorio local

![[Allison_horst](https://github.com/allisonhorst)](images/git-fetch.png)

## Actualizar un repositorio local

::: small
¿Existe alguna información nueva en mi repositorio remoto?
:::

``` bash
git fetch  
```

::: small
¿Existe alguna información nueva en mi repositorio remoto y quiero que esté en mi repositorio local?
:::

``` bash
git pull  
```

::: callout-warning
-   Prestar atención a la rama!!

``` bash
git pull origin master 
```
:::

## Otros comandos

![](images/cheat-git.png){fig-align="center"}

## Anexo. Formas de usar git: **shell**

![[Git for Windows](https://gitforwindows.org/)](images/git-for-windows.png){fig-align="center"}

## Anexo. Formas de usar git: **git-GUI**

- Clientes de [git GUI](https://git-scm.com/downloads/guis) (Guest User Interfaces) 

![](images/github-desktop.png){fig-align="center"}

## Anexo. Formas de usar git: **R-studio**


[https://happygitwithr.com/](https://happygitwithr.com/)


<p><a href="https://posit.co/resources/videos/happy-git-and-gihub-for-the-user-tutorial/?wvideo=dusx6e0tkp"><img src="https://embed-ssl.wistia.com/deliveries/eaee342e574c4ab3a17685075a50f82c.jpg?image_play_button_size=2x&amp;image_crop_resized=960x540&amp;image_play_button=1&amp;image_play_button_color=71aadbe0" width="400" height="225" style="width: 400px; height: 225px;"></a></p><p><a href="https://posit.co/resources/videos/happy-git-and-gihub-for-the-user-tutorial/?wvideo=dusx6e0tkp">Happy Git and Gihub for the useR Tutorial - Posit</a></p>

## ¿Alguna duda?

- [@ajpelu](https://twitter.com/ajpelu)
- [antonio.perez@inia.csic.es](mailto: antonio.perez@inia.csic.es)


<small>Ayuda JDC2022-050056-I financiada por MCIN/AEI /10.13039/501100011033 y por la Unión Europea NextGenerationEU/PRTR</small>

![](images/logo-jdc.png){fig-align="center" width=40%}


::: {.callout-tip}
## Si usas esta presentación puedes citarla como:
<small>**Pérez-Luque, A.J. **(2025). Control de Versiones con Git y GitHub. Material Docente de la Asignatura: Ciclo de Gestión de los Datos. Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad. Universidad de Granada. [https://ecoinfugr.github.io/ecoinformatica/](https://ecoinfugr.github.io/ecoinformatica/) </small>
:::
