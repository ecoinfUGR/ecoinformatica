---
title: "Estructuras de Control en Programación (R y Python)"
author: 
  - name: "Antonio J. Pérez-Luque"
    orcid: 0000-0002-1747-0469
    email: antonio.perez@inia.csic.es
    affiliation: Instituto de Ciencias Forestales (CIFOR) | INIA-CSIC (Madrid)
date: 2025-01-15
sesion: 3
format: 
  revealjs:
    auto-stretch: false 
    logo: "images/logo-ugr.png"
    footer: Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad
    theme: [default, "../../custom_theme.scss"] 
    transition: fade
    background-transition: fade
    highlight-style: a11y
code-link: true
crossref:
  fig-title: Figura     # (default is "Figure")
  tbl-title: Tabla     # (default is "Table")
  title-delim: .     # (default is ":")
  fig-prefix: Figura
  tbl-prefix: Tabla
  ref-hyperlink: true
  sec-prefix: ""
  sec-labels: alpha
code-annotations: hover
execute:
  echo: true     
  eval: true     
  output: true   
  include: true
---

## Introducción

- **Estructuras de control**: Herramientas fundamentales en programación que permiten modificar el flujo de ejecución de un programa según ciertas condiciones o repeticiones.
- Son esenciales para tomar decisiones dinámicas, realizar acciones repetitivas y dirigir cómo se ejecuta el código, haciéndolo más flexible y adaptable.

---

## Tipos de Estructuras de Control {footer=false}

::: {.incremental}

::: small
1. **Estructuras Secuenciales**: Ejecutan instrucciones una tras otra

2. **Estructuras de Selección** (Condicionales): Permiten que un bloque de código se ejecute o no, en función de una condición. Dependiendo de si una condición es `TRUE` o `FALSE`, el algoritmo toma un camino u otro. **Tipos**:
     - **Simple**: Una única condición (**`if`**).
     - **Doble**: Incluye una alternativa (**`if-else`**).
     - **Múltiple**: Varias alternativas posibles (**`switch`**).

3. **Estructuras de Iteración** (Bucles): Permiten repetir un bloque de código varias veces mientras se cumpla una condición o sobre una secuencia de elementos. **Tipos**:
     - **`for`**: Itera sobre una secuencia conocida.
     - **`while`**: Repite mientras una condición sea `TRUE`.
     - **`repeat`**: Ejecuta indefinidamente hasta que se use un `break` para detenerlo.
::: 

::: 
--- 

### 2. Condicionales **simple** 

::: small
- Permiten que un bloque de código se ejecute o no, en función de una condición. 
- Dependiendo de si una condición es `TRUE` o `FALSE`, el algoritmo toma un camino u otro.


::: {.callout-tip}
## Recuerda los operadores en R:
- `==` (igualdad)
- `!=` (distinto)
- `>` (mayor que)
- `<` (menor que)
- `>=` (mayor o igual que)
- `<=` (menor o igual que)

::: 

::: 

---

### 2. Condicionales **simple** 

::: {.panel-tabset}
## Datos ejemplo

```{r}
#| echo: false
#| message: false
library(tidyverse)
```


```{r}
library(tibble)

pinos <- tibble(
  id = 1:10,
  especie = c("sylvestris", "nigra", "pinaster", "sylvestris", "nigra",
              "pinaster", "sylvestris", "nigra", "pinaster", "sylvestris"),
  dbh_cm = c(30.5, 6.5, 7.2, 5.0, 28.3, 35.1, 7.0, 6.8, 40.0, 32.7), 
  altura_m = c(12.5, 13.2, 10.0, 9.5, 14.0, 15.0, 8.2, 11.8, 14.5, 12.0) 
)
```

## Condicional if 

```{r}
pino1 <- pinos[1, ]

if (pino1$dbh_cm > 7.5) {
  # calcula el área basal del pino en m2
  area_basal <- pi * ((pino1$dbh_cm / 100) / 2)^2

  print(paste(
    "El árbol con ID", pino1$id,
    "pertenece a la especie Pinus", pino1$especie,
    "y tiene un área basal de",
    round(area_basal, 4), "m².", sep = " "
  ))
}
```

::: 

## Ejemplo práctico 
::: small
- Se han muestreando diferentes *plots circulares* en pinares de repoblación para evaluar la densidad de plantación
- En cada plot (de radio variable) anotamos el número de individuos de cada especie 
- ¿podrías escribir un código que calcule el área muestreada en cada plot?

::: {.panel-tabset}
### Creación de un `tibble` con los datos 
```{r}
library(tibble)
pinares <- tibble(
  id_plot = c("syl1", "syl2", "nig1", "nig2", "nig3"),
  radio_m = c(5, 6, 7, 8, 9),
  n_individuos = c(10, 12, 15, 18, 20)
)
```
### Vista del tibble
```{r}
pinares
```

::: 
:::

## Solucionario 

::: {.notes}
Sol1. generar objetos para cada radio. Inconvenientes: código repetitivo y poco eficiente. Facilidad de cometer errores.
Sol2. Crear una nueva columna en el tibble con el área de cada plot. Más eficiente y menos propenso a errores.
Sol3. Crear una función que calcule el área de un plot y aplicarla a cada radio. Más eficiente y reutilizable.
:::

::: small
::: {.panel-tabset}
### Sol. 1
```{r}
radios <- pinares$radio_m

area1 <- pi * radios[1]^2
print(area1)

area2 <- pi * radios[2]^2
print(area2)

area3 <- pi * radios[3]^2
print(area3)

area4 <- pi * radios[4]^2
print(area4)

area5 <- pi * radios[5]^2
print(area5)
```

### Sol. 2
```{r}
pinares$area_m2 <- pi * pinares$radio_m^2

pinares
```


### Sol. 3 
```{r}
calcula_area <- function(x) {
  return(pi * x^2)
}

pinares$area2_m2 <- sapply(pinares$radio_m, calcula_area)
pinares
```

### Bucles
```{r}
for (i in pinares$radio_m) {
  print(pi * i^2)
}
```
::: 
:::

--- 

## Uso de bucles 
### **¿Qué son los bucles en programación?**

- Son secuencias código que se ejecutan repetidas veces, hasta que la condición asignada a dicho bucle deja de cumplirse

**¿Por qué usarlos?**

  - Para iterar sobre elementos de un conjunto de datos.
  - Para automatizar tareas repetitivas.
  - Para realizar cálculos iterativos.
  
---
  
## **Tipos de bucles**:
  - **`for`**: Iteraciones sobre elementos definidos.
  - **`while`**: Iteraciones controladas por una condición.
  - **`repeat`**: Repeticiones indefinidas con una interrupción explícita.


## **`for` loop: iteraciones determinadas**
Ejecuta un bloque de código para cada elemento de una secuencia predefinida.


<span style="color:blue;">for (</span><span style="color:red;">item</span> in <span style="color:orange;">list_of_items</span><span style="color:blue;">)</span> <span style="color:blue;">{</span> <br>
  <p style="text-indent: 50px;">
  <span style="color:green;">do_something(</span><span style="color:red;">item</span><span style="color:green;">)</span></p>
<span style="color:blue;">}</span>



#### **Ejemplo**:

::: {.panel-tabset}
## R

```{.r}
for (i in 1:5) {
  print(i * i)
}
```

## Python

```{.python}
for i in range(1, 6):
    print(i**2)
```

:::

---

### Estudio en detalle del bucle 

```{r}
radios <- pinares$radio_m
radios
```

<br> 
```{r}
#| output: false
for (i in radios) { # <1>
  area <- (pi * i^2) # <2>
  print(area) # <2>
} # <3>
```

1. **Iteración**: `i` toma el valor de cada elemento de la lista `radios`.
2. **Ejecución del código**: Se calcula el área de cada plot y se imprime por pantalla
3. **Finalización**: Si hay mas elementos dentro de la lista, el bucle se repite. Cuando se haya procesado todos los elementos, el bucle termina

<br> 

```{r}
#| echo: false
for (i in radios) {
  area <- pi * i^2
  print(area)
}
```

## Elementos del bucle

![](images/for_structure.png){fig-align="center" width=70%}


## Elementos del bucle: **Índice** 

::: small
Looping por **valor**: cuando se itera sobre un valor directamente

  - Más compacto y legible
  - Directamente trabaja con los valores del vector
  - Útil cuando no necesitas los índices, solo los valores

::: 

```{.r}
for (i in radios) {
  area <- pi * i^2
  print(area)
}
```

--- 

## Elementos del bucle: **Índice** {footer=false}

::: small
Looping por **índice**: cuando se itera sobre un índice de la lista o del vector 

  - Más flexible y versátil
  - Permite acceder tanto a los índices como a los valores
  - Útil cuando necesitas los índices para realizar operaciones específicas

::: 

::: {.panel-tabset}
#### Ejemplo 1
```{.r}
for (i in 1:5) {
  area <- pi * radios[i]^2
  print(area)
}
```

#### Ejemplo 2
```{.r}
for (i in 1:length(radios)) {
  area <- pi * radios[i]^2
  print(area)
}
```
:::

---

### ¿looping por índice o por valor?

::: small

- El resultado es el mismo, pero el enfoque depende de la tarea que estés realizando
- El bucle por índice permite realizar operaciones más complejas y personalizadas
- Permite almacenar los datos calculados en el bucle 

:::

```{r}
areas1 <- vector() # <1>

areas2 <- vector(mode = "numeric", length = length(radios)) # <2>
```

1. Podemos crear un vector vacío y almacenar los resultados en cada iteración
2. Crear un vector vacío tipo numérico con la longitud de la lista `radios` 

<br>
```{r}
print(areas1)
```


```{r}
print(areas2)
```

--- 

### ¿looping por índice o por valor?


::: {.panel-tabset}
### areas1
```{.r}
areas1 <- vector()
  
for (i in 1:length(radios)) {
  area <- pi * radios[i]^2
  # print(area)
  areas1[i] <- area 
}
  
print(areas1)
```


### areas2
```{.r}
areas2 <- vector(mode = "numeric", length = length(radios))
  
for (i in 1:length(radios)) {
  area <- pi * radios[i]^2
  # print(area)
  areas2[i] <- area 
}

print(areas2)
```

::: 

## Práctica 1

Escribe un bucle que permita calcular el tamaño de los plots de las zonas de muestreo en hectáreas

```{r}
#| code-fold: true
#| eval: false
areas_ha <- vector(mode = "numeric", length = length(radios))
  
for (i in 1:length(radios)) {
  area <- pi * radios[i]^2
  area_ha <- area / 10000
  areas_ha[i] <- area_ha
}

print(areas_ha)
```

## Práctica 2
Completa el siguiente bucle para que imprima los nombres de las especies de los pinares


```{.r}
especies <- c(
  "Pinus sylvestris", "Pinus nigra", "Pinus halepensis",
  "Pinus pinaster", "Pinus canariensis", "Pinus pinea"
)

for (sp in 1:length( <-???-> )) { 
  print(especies[ <-???-> ])     
}
```

## Práctica 3 {footer=false}

::: small

Escribe un bucle que calcule la **densidad de árboles** para cada parcela en pies/hectárea

:::

```{r}
#| code-fold: true

radios <- pinares$radio_m # <1>
arboles <- pinares$n_individuos # <1>

densidad <- vector(
  mode = "numeric",
  length = length(pinares$radio_m)) # <2>

for (i in 1:length(radios)) {
  area <- pi * radios[i]^2 # <3>
  area_ha <- area / 10000 # <3>

  densidad[i] <- arboles[i] / area_ha # <4>
}
```


1. Dos vectores de datos
2. Objeto donde almacenar los resultados
3. Itera sobre el primer vector (`radios`) para calcular el área
4. Itera sobre el seguno vector (`arboles`) para calcular la densidad


::: {.notes}
Esta práctia sirve para introducir concepto de bucle con entrada de diferentes fuentes. Usando index, podemos acceder a diferentes entradas.
::: 


## Práctica 3 {footer=false}

::: small

* ¿Podría actuar sobre un solo `data.frame` o `tibble`?
* ¿Podría almacenar los resultados en ese mismo `tibble`? 

:::

```{r}
#| code-fold: true
pinares <- tibble( 
  id_plot = c("syl1", "syl2", "nig1", "nig2", "nig3"),
  radio_m = c(5, 6, 7, 8, 9),
  n_individuos = c(10, 12, 15, 18, 20)
)
  
for (i in 1:nrow(pinares)) {
  pinares$area[i] <- (pi * pinares$radio_m[i]^2 / 10000)
  pinares$densidad[i] <- pinares$n_individuos[i] / pinares$area[i] 
}

pinares
```



::: {.notes}
Esta práctia sirve para introducir concepto de bucle con entrada de diferentes fuentes. Usando index, podemos acceder a diferentes entradas.
::: 

## Aplicaciones

- looping en funciones
- looping sobre dataframes o tibbles ()
- Looping sobre archivos y directorios
- Almacenar datos 
- Bucles anidados 


## **2. `while` Loop: Repetición Condicional**
Ejecuta un bloque de código mientras una condición sea verdadera



```{r}
radios <- pinares$radio_m 

i <- 1 # <1> 
  
while (i <= 3) { # <2> 
  
  area <- pi * radios[i]^2 # <3>
  area_ha <- area / 10000  # <3>
  print(area_ha) # <3>
  
  i <- i + 1 # <4>
}
  
  
```

1. Iniciamos el contador
2. Condición de salida
3. Código a ejecutar
4. Actualización del contador 

---

::: {.callout-important}
## Inicializar las varbiables
::: 

::: small

::: {.panel-tabset}

## Dataframe 
```{r}
bosques <- tibble( 
  id_plot = c("syl1", "syl2", "nig1", "nig2", "nig3"),
  radio_m = c(5, 6, 7, 8, 9),
  n_individuos = c(10, 12, 15, 18, 20)
)
 
```

## Sin inicializar
```{r}
i <- 1 
while (i <= 3) {
  bosques$area[i] <- (pi * bosques$radio_m[i]^2 / 10000)
  bosques$densidad[i] <- bosques$n_individuos[i] / bosques$area[i]
  i <- i + 1
}

bosques
```

## Inicializadas
```{r}
bosques$area <- vector(mode = "numeric", length = nrow(bosques)) 
bosques$densidad <- vector(mode = "numeric", length = nrow(bosques))

i <- 1 
while (i <= 3) {
  bosques$area[i] <- (pi * bosques$radio_m[i]^2 / 10000)
  bosques$densidad[i] <- bosques$n_individuos[i] / bosques$area[i]
  i <- i + 1
}

bosques
```

:::

::: 

## **3. `repeat` Loop: Repetición Indefinida**

### **¿Qué es?**
- Ejecuta un bloque de código indefinidamente hasta que se usa `break`.

### **Ejemplo**:
```r
i <- 1
repeat {
  print(mean(iris$Petal.Length[iris$Species == unique(iris$Species)[i]]))
  i <- i + 1
  if (i > 3) break
}
```

## **4. Alternativas Vectorizadas (`apply`, `tapply`)**

### **¿Qué son?**
- Métodos eficientes y vectorizados para realizar operaciones en matrices o listas.

### **Ejemplo**:
```r
tapply(iris$Sepal.Width, iris$Species, mean)
```

### **Ventajas**:
- Más rápidas y concisas que los bucles tradicionales.
- Mejor adaptadas para trabajar con grandes volúmenes de datos.

---

## **5. Comparación con `purrr`**

### **¿Qué es `purrr`?**
- `purrr` es un paquete del ecosistema tidyverse que facilita la programación funcional.

### **Ejemplo Comparativo**
#### Usando un bucle `for`:
```r
species_means <- numeric()
for (species in unique(iris$Species)) {
  species_means <- c(species_means, mean(iris$Sepal.Length[iris$Species == species]))
}
print(species_means)
```
--- 

#### Usando `purrr::map`:
```r
library(purrr)
species_means <- map(unique(iris$Species), ~ mean(iris$Sepal.Length[iris$Species == .x]))
print(species_means)
```

### **Ventajas de `purrr`**:
- Sintaxis más compacta y legible.
- Integración directa con otras herramientas del tidyverse.
- Mejora la eficiencia para operaciones funcionales repetitivas.

---

## **6. Comparación General**

| Tipo de Bucle     | Ventajas                          | Desventajas                       |
|--------------------|-----------------------------------|------------------------------------|
| `for`             | Simple y flexible                 | Menos eficiente con grandes datos |
| `while`           | Útil para condiciones dinámicas   | Mayor riesgo de bucles infinitos  |
| `repeat`          | Gran control manual               | Requiere interrupción explícita   |
| `apply`/`tapply`  | Altamente eficiente y compacto    | Menos intuitivo para principiantes|
| `purrr::map`      | Sintaxis legible y funcional      | Requiere instalación adicional    |

---

## **Conclusión**

- **Básico**: Los bucles (`for`, `while`, `repeat`) son fundamentales para aprender programación iterativa.
- **Avanzado**: Las funciones vectorizadas (`apply`, `tapply`) y paquetes como `purrr` son ideales para mejorar el rendimiento y la legibilidad.
- **Recomendación**: Usa bucles simples para aprender y alterna con soluciones vectorizadas o funcionales para proyectos más complejos.


## ¿Alguna duda?

- [@ajpelu](https://twitter.com/ajpelu)
- [antonio.perez@inia.csic.es](mailto: antonio.perez@inia.csic.es)


<small>Ayuda JDC2022-050056-I financiada por MCIN/AEI /10.13039/501100011033 y por la Unión Europea NextGenerationEU/PRTR</small>

![](images/logo-jdc.png){fig-align="center" width=40%}


::: {.callout-tip}
## Si usas esta presentación puedes citarla como:
<small>**Pérez-Luque, A.J. **(2025). Búsqueda de Datos primarios de Biodiversidad. Material Docente de la Asignatura: Ciclo de Gestión de los Datos. Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad. Universidad de Granada. [https://ecoinfugr.github.io/ecoinformatica/](https://ecoinfugr.github.io/ecoinformatica/) </small>
:::
