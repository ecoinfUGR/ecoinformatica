{
  "hash": "e897443030fe896ce9dd3aed0de68a0c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Documentos Reproducibles con Rmarkdown\"\nformat: html\nnumber-sections: true\nnumber-depth: 4\ndate: 2025-01-09\nsesion: 3\nauthor: \n  - name: \"Antonio J. Pérez-Luque\"\n    orcid: 0000-0002-1747-0469\n    email: antonio.perez@inia.csic.es\n    affiliation: Instituto de Ciencias Forestales (CIFOR) | INIA-CSIC (Madrid)\ncrossref:\n  fig-title: Figura     # (default is \"Figure\")\n  tbl-title: Tabla     # (default is \"Table\")\n  title-delim: .     # (default is \":\")\n  fig-prefix: Figura\n  tbl-prefix: Tabla\n  ref-hyperlink: true\n  sec-prefix: \"\"\n  sec-labels: alpha\n---\n\n\n# Introducción {.unnumbered}\n\nEn este tutorial vamos a aprender a crear documentos dinámicos y reproducibles con R y Rmarkdown (`Rmd`)(@fig-rmd-allison). Vamos a trabajar con [R](https://www.r-project.org/), Rstudio (ahora llamado [posit](https://posit.co/)), y utilizaremos al menos el paquete [`rmarkdown`](https://rmarkdown.rstudio.com/).\n\nPara la realización de este tutorial hemos utilizado recursos de diferentes fuentes. En el apartado [Recursos](#sec-recursos) se encuentran listados todos los que se han utilizado. \n\n![Esquema general de `Rmd`. Fuente: [\\@allison_horst](https://allisonhorst.com/allison-horst)](images/rmd-allison.png){#fig-rmd-allison}\n\n# Flujo de Trabajo\n\n1.  Crear archivo `.Rmd`\n2.  Escribir encabezado YAML\n3.  Escribir texto y código\n4.  Renderizar (`Knit`)\n\n![](images/rmd-workflow.png)\n\n## Crear un archivo `.Rmd`\n\nDentro de R-Studio, haz clic en **Archivo → Nuevo archivo → Rmarkdown** (@fig-crea-rmd).\n\n::: {#fig-crea-rmd layout-ncol=\"2\" layout-valign=\"bottom\"}\n![Crea archivo `Rmd`](images/rmd-create.png){#fig-create-rmd}\n\n![Define detalles generales `Rmd`](images/rmd-create2.png){#fig-create-rmd-details}\n\nCrea archivo `Rmd`\n:::\n\n# Estructura de un archivo `Rmd`\n\n## Encabezado YAML\n\n[YAML](https://yaml.org/)[^1], es un lenguaje de serialización de datos para todos los lenguajes de programación. Se diseño para representar datos jerárquicos pero que sea fácil de escribir y leer por humanos.\n\n[^1]: *YAML Ain't Markup Language*\n\nEl encabezado YAML presenta estructura de lista anidada y contiene diferentes metadatos del documento (como el título del documento, el autor, los formatos de salida, etc). Todos estos argumentos quedan delimitados por tres guiones `---` al inicio y al final (a modo de bloque).\n\n::: {#fig-yaml layout-ncol=\"2\" layout-valign=\"bottom\"}\n![Encabezado YAML](images/ymal-example.png){#fig-ymal-example}\n\n![Vista tras su renderización](images/ymal-render.png){#fig-yaml-render}\n\nEncabezado YAML\n:::\n\nExisten diferenes parámetros que se pueden especificar en el encabezado YAML, que van a definir algunas características del documento.\n\n-   `title`: Título del documento\n-   `author`: Autor del documento\n-   `output`: Formatos de salida del documento (`pdf`, `word`, `html`, etc). Mas información [aquí](https://rmarkdown.rstudio.com/lesson-9.html)\n-   `date`: Fecha del documento\n\nAlgunos parámetros van a estar condicionados por el tipo de formato de salida. Por ejemplo:\n\n-   `toc`: `true` Mostrar la tabla de contenidos cuando la salida sea de tipo html.\n-   También podemos especificar una plantilla de word.\n\n``` yaml\n---\noutput:\n  word_document:\n    reference_docx: \"template.docx\"\n---\n```\n\nExisten diferentes formatos de salida de documentos. En el ejemplo (@fig-yaml) hemos usado `html`, pero podemos especificar diferentes formatos de salida (`word`, `pdf`, presentaciones, etc.). Cada tipo de documento de salida presenta diferentes parámetros que se pueden especificar en la cabecera YAML. Por ejemplo, para saber qué parámetros puedes definir con `html_document`, podemos usar el comando `?rmarkdown::html_document`. Así, por ejemplo:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?rmarkdown::word_document\n```\n:::\n\n\n``` r\nword_document(\n  toc = FALSE,\n  toc_depth = 3,\n  number_sections = FALSE,\n  fig_width = 5,\n  fig_height = 4,\n  fig_caption = TRUE,\n  df_print = \"default\",\n  highlight = \"default\",\n  reference_docx = \"default\",\n  keep_md = FALSE,\n  md_extensions = NULL,\n  pandoc_args = NULL\n)\n```\n\n## Narrativa (Texto del documento)\n\nEsta parte del documento se utiliza para describir diferentes aspectos de nuestro trabajo: el resumen, una introducción, la motivación del trabajo, metodologías, resultados, etc. En un documento `.Rmd` todo lo que no esté en el encabezazo YAML o dentro de un `chunk` de código, será interpretado como texto.\n\nPara escribir la parte narrativa se utiliza el lenguaje [Markdown](https://es.wikipedia.org/wiki/Markdown), que no es mas que una colección simple de convenciones para dar formato a archivos de texto plano. Está diseñado para que sea fácil de leer, de escribir y también de aprender. En la siguiente tabla tienes algunos ejemplos de como es la sintáxis markdown.\n\n| Formato  | Sintáxis                          | Ejemplo                                  |\n|-------------------|--------------------------|----------------------------|\n| Cursiva  | `*Texto*`                         | *Esto es cursiva*                        |\n| Negrita  | `**Negrita**`                     | **Esto es negrita**                      |\n| Link     | `[Descripción del texto](url)`    | Un [link](http://www.github.com)         |\n| Imágenes | `![Descripción](url a la imagen)` | Una imagen ![image](images/rmd-logo.png) |\n\nPara crear encabezados de secciones y subsecciones has de utilizar el simbolo `#`. De tal forma:\n\n``` md\n# Título\n## Sección principal\n### Subsección\n#### Sub-subsección\n```\n\nTambién se pueden incluir **superíndices** escribiendo `R^2^` lo que produce R^2^, o **subíndices**, escribiendo `CO~2~` que produce CO~2~.\n\nA veces puede interesarnos escribir **ecuaciones**. Para ello vamos a usar el lenguaje [LaTeX](http://www.latex-project.org/). Existen algunos editores online que nos permiten escribir ecuaciones usando LaTeX, como por ejemplo [este](https://latex.codecogs.com/eqneditor/editor.php).\n\nLas ecuaciones pueden incluirse en la misma línea, para lo cual incluimos la ecuación entre simbolos `$...$`. Por ejemplo:\n\nEn nuestro estudio utilizamos una regresión de acuerdo a $y_i=a_i+b_iX$.\n\nPara obtener esta ecuación hemos escrito `$y_i=a_i+b_iX$`\n\nTambién podemos incluir ecuaciones mas complejas en párrafo aparte usando `$$...$$`. Por ejemplo para obtener $$y = \\mu + \\sum_{i=1}^p \\beta_i x_i + \\epsilon$$\n\nescribimos `$$y = \\mu + \\sum_{i=1}^p \\beta_i x_i + \\epsilon$$`\n\nExisten muchos recursos en la web sobre sintáxis markdown. Por ejemplo [aquí](https://www.markdownguide.org/basic-syntax/) o [aquí](https://quarto.org/docs/authoring/markdown-basics.html) puedes encontrar una lista completa de la sintáxis markdown\n\n## Trozos de código\n\nLos trozos o bloques de código (`chunks`) dentro de un documento RMarkdown permiten ejecutar diferentes análisis y mostrar resultados en el documento final. Para distinguir los trozos de código del resto de elementos del documento `.Rmd` tenemos que indicar un tipo especial de marca.\n\nExisten dos formas de incrustar código dentro de un documento `.Rmd`:\n\na.  **Código en línea:** Código breve que se incluye en una línea escrita del documento (generalmente no mas de una línea de código)\n\nb.  **Bloques de código (`chunks`):** Partes del documento que incluyen varias líneas de código. Permiten represantar gráficos, tablas, aplicar análisis estadísticos, cargar paquetes, etc.\n\n### a. Código R en línea\n\nPara incluir código en líneas hay que utilizar la siguiente sintaxis `` `r ` ``, en la que incluiremos nuestro código después de la letra `r`. Por ejemplo si escribimos: la media de nuestro grupo es `` `r mean(c(1,3))` ``, aparece como: la media de nuestro grupo es 2. De esta forma podemos incluir resultados de análisis (e.g. p.valor de un análisis) sin tener que copiarlos a mano, reduciendo la generación de errores.\n\n### b. Bloques de código (**chunks**)\n\nLos trozos de código se pueden utilizar para representar la salida del código en los documentos o para mostrar el código para la ilustración. Los trozos de código pueden estar escritos en diferentes lenguajes (e.g.: `shell/bash`, `python`, `SQL`, `R`, etc.)\n\nPara insertar un trozo de código en R, puedes escribirlo manualmente escribiendo ```` ```{r} ```` seguido de ```` ``` ```` en la siguiente línea. Esto producirá el siguiente fragmento de código:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn <- 5\nseq(n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\nKnitr interpreta ese trozo de texto como instrucciones de R, las ejecutará y mostrará los resultados como parte del documento.\n\nEn la siguiente animación (@fig-chunk-anatomy) puedes ver la anatomía de un trozo de código.\n\n![Anatomía de un trozo de Código. Fuente: [Shannon Pileggi](https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-markdown/)](gif/chunk-anatomy.gif){#fig-chunk-anatomy}\n\nExisten varias formas de insertar un chunk de código:\n\n-   Usando \"Insert\" en la barra de Edición\n-   Escribiendo manualmente ```` ```{r} ```` y ```` ``` ````\n-   Usando un atajo de teclado:\n    -   Ctrl + Alt + I (Windows)\n    -   Cmd + Alt + I (OS)\n\n### Opciones y nombres de los bloques\n\nCuando creamos un documento reproducible es importante identificar los diferentes trozos de código para poder ejecutarlos a lo largo de todo el documento. Esta aproximación tiene varias ventajas:\n\n1.  Se puede navegar mas cómodamente a los bloques específicos usando el navegador de código desplegable abajo a la izquierda en el editor de script:\n\n![](images/code-navigation.png)\n\n2.  En caso de que el bloque de código produzca un gráfico, se usará el nombre del bloque para nomobrar los gráficos facilitando la reutilización de estos gráficos.\n\n3.  Guardar bloques específicos de código complejo y costoso de ejecutar en la caché.\n\nEn nuestro ejemplo anterior podemos añadir el nombre del chunk como `1-numero-aleatorio`:\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r 1-numero-aleatorio}}\nn <- 5\nseq(n)\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\nLas salidas de los códigos pueden personalizarse con diferentes opciones. Estas opciones se suminustran para cada uno de los chunks. Existen mas de 50 opciones de personalización que pueden ser consultadas [aquí](http://yihui.name/knitr/options/). Las principales son:\n\n-   `eval = FALSE` evita que el código sea evaluado. (Y, obviamente, si el código no es ejecutado no se generaran resultados). Esto es útil para mostrar códigos de ejemplo, o para deshabilitar un gran bloque de código sin comentar cada línea.\n\n-   `include = FALSE` ejecuta el código, pero no muestra el código o los resultados en el documento final. Se puede usar para aligerar el aspecto final de nuestro documento.\n\n-   `echo = FALSE` evita que se vea el código, pero sí muestra los resultados en el archivo final.\n\n-   `message = FALSE` o `warning = FALSE` evita que aparezcan mensajes o advertencias en el archivo final.\n\n-   `esults = 'hide'` oculta el output impreso\n\n-   `fig.show = 'hide'` oculta los gráficos producidos\n\n-   `error = TRUE` permite que se siga renderizando el documento a pesar de que exista un error en el código. Puede ser útil durante el proceso de creación de un documento reproducible\n\n### Incluir Tablas\n\nUn aspecto muy intersante de los documentos reproducibles es la inclusión de tablas. Para incluir una tabla existen diferentes opciones, siendo la función `knitr::kable` la que nos permite incluir tablas de la forma mas sencilla (mas información [aquí](https://bookdown.org/yihui/rmarkdown-cookbook/kable.html)). Así por ejemplo, si escribimos\n\n````         \n``` {{r}}\nknitr::kable(\n  mtcars[1:5, ]\n)\n```\n````\n\nobtenemos la @tbl-ejemplo-tabla\n\n\n::: {#tbl-ejemplo-tabla .cell tbl-cap='Ejemplo de Tabla con `kable`'}\n::: {.cell-output-display}\n\n\n|                  |  mpg| cyl| disp|  hp| drat|    wt|  qsec| vs| am| gear| carb|\n|:-----------------|----:|---:|----:|---:|----:|-----:|-----:|--:|--:|----:|----:|\n|Mazda RX4         | 21.0|   6|  160| 110| 3.90| 2.620| 16.46|  0|  1|    4|    4|\n|Mazda RX4 Wag     | 21.0|   6|  160| 110| 3.90| 2.875| 17.02|  0|  1|    4|    4|\n|Datsun 710        | 22.8|   4|  108|  93| 3.85| 2.320| 18.61|  1|  1|    4|    1|\n|Hornet 4 Drive    | 21.4|   6|  258| 110| 3.08| 3.215| 19.44|  1|  0|    3|    1|\n|Hornet Sportabout | 18.7|   8|  360| 175| 3.15| 3.440| 17.02|  0|  0|    3|    2|\n\n\n:::\n:::\n\n\n## Tejer y Renderizar\n\nFinalmente, una vez que tenemos nuestro documento `.Rmd` escrito procedemos a tejer (`knit`) el documento para que se ejecute el código y los resultados se incluyan dentro de nuestro documento. **Knit** es el verbo que describe la combinación de los trozos de código, el código en línea, el markdown y la narrativa.\n\nPara ello en la parte superior del panel, hacer click en `Knit` directamente o desplegar las opciones de `Knit` y ejecutar la que mas nos convenga (@fig-knit, ver animación en @fig-knitting).\n\n![Opciones Knit](images/knit.png){#fig-knit}\n\n![Knit (Tejer) un documento. Fuente: [Shannon Pileggi](https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-markdown/)](gif/knitting.gif){#fig-knitting}\n\n# Resumen del Flujo de Trabajo\n\nResumen de los pasos que sigue RMarkdown para llegar al documento renderizado\n\n1.  Crear un informe `.Rmd` que incluya las especificaciones YAML, trozos de código R (`chunks`) y narraciones markdown\n\n2.  Pasar el archivo `.Rmd` a `knitr` para que ejecute los trozos de código R y cree un nuevo archivo `.md`\n\n-   [Knitr](http://yihui.name/knitr/) es un paquete dentro de R que permite la integración de código R en documentos RMarkdown renderizados como HTML, latex, pdf, word, entre otros tipos de documentos.\n\n3.  El archivo `.md` generado se entrega a **pandoc**, que creará el documento final renderizado (por ejemplo, html, Microsoft word, pdf, etc.). [Pandoc](http://pandoc.org/) es un convertidor universal de documentos y permite la conversión de un tipo de documento (en este caso: `.Rmd`) a otro (en este caso: HTML)\n\n![](images/rmd-workflow.png)\n\n# Recursos {#sec-recursos}\n\n-   [R for Data Science](https://es.r4ds.hadley.nz/r-markdown.html) en especial los capítulos 27 a 29 en su versión en castellano.\n\n-   [R for Reproducible Scientific Analysis (RMarkdown / knitr)](https://reproducible-analysis-workshop.readthedocs.io/en/latest/6.RMarkdown-knitr.html)\n\n-   [Reproducible reports with R markdown](https://intro2r.com/rmarkdown_r.html)\n\n-   [R para Análisis Científicos Reproducibles](https://swcarpentry.github.io/r-novice-gapminder-es/15-knitr-markdown/index.html)\n\n-   [Level up in R Markdown](https://allisonhorst.github.io/ucsb-qmss-rmarkdown/)\n\n-   [Introducing RStudio and R Markdown](https://www.pipinghotdata.com/posts/2020-09-07-introducing-the-rstudio-ide-and-r-markdown/)\n\n-   [Curso de Introducción a R](https://www.uv.es/vcoll/RMarkdown.html)\n\n-   [Escribir un Trabajo Fin de Estudios con R Markdown](http://destio.us.es/calvo/memoriatfe/MemoriaTFE_PedroLuque_2017Nov_imprimir2caras.pdf)\n\n-   ... Existen muchos más\n",
    "supporting": [
      "repro_reproducible_documents_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}