{
  "hash": "6222bf7a82281a9dacc00e5026419e2a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Control de Versiones con Git y GitHub\"\nauthor: \n  - name: \"Antonio J. Pérez-Luque\"\n    orcid: 0000-0002-1747-0469\n    email: antonio.perez@inia.csic.es\n    affiliation: Instituto de Ciencias Forestales (CIFOR) | INIA-CSIC (Madrid)\ndate: 2025-01-20\nsesion: 3\ndate-format: long\nformat: \n  revealjs: \n    multiplex: true\n    logo: \"images/logo-ugr.png\"\n    footer: Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad\n    theme: [default, \"../../custom_theme.scss\"] \n    transition: fade\n    background-transition: fade\n    highlight-style: a11y\ncode-link: true\ncitation: true\n---\n\n\n# ¿Has experimentado alguna de estas situaciones en tu trabajo diario?\n\n------------------------------------------------------------------------\n\n![[phdcomic](http://phdcomics.com/)](images/final_doc.png)\n\n------------------------------------------------------------------------\n\n![[Scott Adams](https://scottadams.locals.com/)](images/tracker.png)\n\n------------------------------------------------------------------------\n\n![[phdcomic](http://phdcomics.com/)](images/astorytold.png)\n\n## ¿Qué es el control de versiones?\n\nEl **control de versiones** es un sistema que registra los cambios realizados sobre un archivo o conjunto de archivos a lo largo del tiempo, de modo que podamos recuperar versiones específicas más adelante\n\n-   Se puede utilizar sobre cualquier archivo.\n-   Permite:\n    -   Revertir archivos (proyecto) a un estado anterior\n    -   Comparar cambios a lo largo del tiempo\n-   Facilita la identificación de errores\n\n## Registro de cambios\n\n![](images/carp-changes.svg)\n\n## Registro de cambios (varios usuarios) {.small}\n\n![](images/carp-two-users.svg){fig-align=\"center\"}\n\n## Integración de cambios\n\n![](images/carp-merge.svg){fig-align=\"center\"}\n\n## Sistemas para el control de versiones\n\n![](images/git_logo.png){fig-align=\"center\" height=\"251\" width=\"600\"}\n\n-   [ProGit book](http://git-scm.com/book/en/v2)\n-   Otros:\n    -   [Subversion](https://subversion.apache.org/)\n    -   Concurrent Version System [CVS](https://www.nongnu.org/cvs/)\n\n## Git\n\n-   Sistema avanzado de control de versiones distribuido\n-   Permite **rastrear** el progreso de un proyecto mediante **capturas**\n    -   **¿Qué cambios?**\n    -   **¿Dónde?**\n    -   **¿Quién los hizo?**\n    -   **¿Por qué?**\n\n------------------------------------------------------------------------\n\n![[Devon Wijesinghe](https://wdevon99.medium.com/git-under-the-hood-26b46a47393c)](images/git-distributed.png)\n\n## GitHub\n\n::: columns\n::: {.column width=\"60%\"}\n::: small\n-   Un website donde alojar repositorios\n-   Interfaz para explorar repositorios\n-   Permite colaborar de una forma más eficaz:\n    -   Compartir repositorio\n    -   Ver cambios\n    -   Corregir errores\n    -   Discutir y Revisar cambios\n:::\n:::\n\n::: {.column width=\"40%\"}\n![](images/github_logo.png){fig-align=\"center\" height=\"300\" width=\"350\"}\n\n\n<https://github.com/>\n:::\n:::\n\n## Recursos sobre Git\n\n::: small\n- [Interactive Tutorial Git (CodeSchool)](https://try.github.io/levels/1/challenges/1)\n- [Git - the simple guide (Roger Dudler)](http://rogerdudler.github.io/git-guide/index.es.html)\n- [Git and GitHub (Hadley Wickham)](http://r-pkgs.had.co.nz/git.html)\n- [A brief introduction to git & GitHub (Karl Broman & Samuel G. Younkin)](https://www.biostat.wisc.edu/~kbroman/talks/GitPrimer.pdf)\n- [A basic tutorial to version control using git (Jon Lefcheck)](http://jonlefcheck.net/2013/11/04/a-basic-tutorial-to-version-control-using-git/)\n- [Git/Github guide a minimal tutorial (Karl Broman)](http://kbroman.org/github_tutorial/)\n- [Getting Git Right (Atlassian)](https://www.atlassian.com/git/tutorials/setting-up-a-repository)\n- [Recopilación de tutoriales (F. Rodríguez-Sánchez)](https://gist.github.com/Pakillo/63c15c700c9c76fe8032)\n- [Guía Visual de Git](https://marklodato.github.io/visual-git-guide/index-es.html)\n- [Introducción al funcionamiento y uso de git y github](https://juancuiule.github.io/intro-a-git/) \n:::\n\n## Ciclo de Git\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Artwork by [Allison_horst](https://github.com/allisonhorst)](images/git-cycle-allison.png){fig-align='center' width=2000}\n:::\n:::\n\n\n## Ciclo de Git\n\n![[T. Meralus](https://meralus.com/git-pull-all/)](images/git-workflow.png)\n\n## Instalar Git\n\n::: small\n-   Instala Git en tu ordenador. Puedes usar la [documentación oficial](https://git-scm.com/book/es/v2/Inicio---Sobre-el-Control-de-Versiones-Instalaci%C3%B3n-de-Git)\n:::\n\n#### Configurar Git\n\n::: panel-tabset\n## Código\n\n``` bash\ngit config --global user.name \ngit config --global user.email \n```\n\n## Ejemplo\n\n``` bash\ngit config --global user.name \"Fulanito Menganito\"\ngit config --global user.email micorreo@gmail.com\n```\n:::\n\n::: small\n::: callout-note\nVamos a usar Github, por tanto la dirección de correo que indiques ha de ser la misma con la que te registres en GitHub.\n:::\n\n-   En cualquier momento podemos ver las opciones de configuración\n\n``` bash\ngit config --list\n```\n:::\n\n## Crear un repositorio nuevo\n\n-   Abre la [consola de comandos](https://linube.com/ayuda/articulo/174/abrir-una-consola-de-comandos)\n-   Crea un directorio nuevo y ábrelo[^1]\n\n[^1]: [Ayuda sobre comandos](http://overapi.com/linux/)\n\n``` bash\nmkdir <nombre_directorio>\n```\n\n<br>\n\n``` bash\nmkdir datos\ncd datos\n```\n\n## Iniciar un repositorio\n\n-   Para **iniciar un repositorio** utilizamos el comando\n\n```{.r code-line-numbers=\"1\"}\ngit init nombrerepositorio\ngit init mi_primer_repositorio\n```\n\n::: callout-note\n¿Que ha ocurrido en nuestro directorio?\n:::\n\n- Inspeccionar el directorio\n\n``` bash\ncd mi_primer_repositorio\nls -a \ncd .git\n```\n\n## Añadir cambios\n\n-   Crea un archivo de texto dentro del directorio, escribe algo y nómbralo **miarchivo.txt**\n\n-   Añade el archivo a la **staging area**\n\n``` bash\ngit add <nombre_archivo>\n```\n\n``` bash\ngit add miarchivo.txt\n```\n\n-   Si quiero añadir todos los archivos\n\n``` bash\ngit add . \n```\n\n## Registrar cambios\n\n``` bash\ngit commit -m \"Commit message\"\"\n```\n\n::: callout-important\nEl mensaje nos servirá para indicar lo que hemos hecho.\n\n-   [Recomendaciones](https://midu.dev/buenas-practicas-escribir-commits-git/) de buenas prácticas para commits\n-   [Algunas convenciones para commits](https://www.conventionalcommits.org/en/v1.0.0/)\n:::\n\n``` bash\ngit commit -m \"Escribo mis datos personales en archivo\"\n```\n\n<br>\n\n    [master (root-commit) 71fe224] Escribo mis datos personales en archivo\n     1 file changed, 2 insertions(+)\n     create mode 100644 miarchivo.txt\n\n## \n\n![[Allison_horst](https://allisonhorst.com/git-github)](images/git-escalada.png)\n\n## \n\n![[Allison_horst](https://allisonhorst.com/git-github)](images/git-escalada-caida.png)\n\n\n## \n\n![[T. Meralus](https://meralus.com/git-pull-all/)](images/git-workflow.png)\n\n## Enviar cambios a Repositorios Remotos\n\n-   Nuestros cambios están en el **`HEAD`** (copia local)\n-   Queremos enviar los cambios a un **repositorio remoto**\n\n::: callout-caution\nNecesitamos un repositorio remoto (GitHub):\n\n-   Crear\n-   Clonar\n:::\n\n``` bash\ngit remote add origin <url server>\n\ngit remote add origin https://github.com/ajpelu/teach_git_ejemplo.git\n```\n\n## Crear repositorio en GitHub\n\n![](images/crea_repo.gif)\n\n\n## \n\n![[Julen Astigarraga](https://github.com/Julenasti)](images/github-julen.jpeg)\n\n## \n\n![[Julen Astigarraga](https://github.com/Julenasti)](images/github-julen2.jpeg)\n\n\n## Enlazar repositorio local y remoto\n\n<br> URL: <br> **https://github.com/ajpelu/teach_git_ejemplo.git**\n\n<br>\n\n``` bash\ngit remote add origin <url server>\ngit remote add origin https://github.com/ajpelu/teach_git_ejemplo.git\n```\n\n## Enviar\n\n::: small\n-   Para enviar cambios (una vez conectados) a un repositorio remoto\n-   Nos pedirá usuario y contraseña\n:::\n\n``` bash\ngit push origin master\n```\n\n::: callout-warning\n``` bash\ngit push origin\n```\n\n``` bash\ngit push origin master\n```\n\n[¿Qué rama queremos sincronizar?](https://www.geeksforgeeks.org/difference-between-git-push-origin-and-git-push-origin-master/)\n:::\n\n![](images/git-push.png){fig-align=\"center\"}\n\n## Clonar un repositorio\n\n![](images/clon_repo.gif)\n\n## Clonar un repositorio\n\n-   Importante para reproducibilidad\n-   Colaboración\n-   Repositorio remoto (`GitHub`)\n-   2 formas ([diferencias](https://www.howtogeek.com/devops/should-you-use-https-or-ssh-for-git/))\n\n::: panel-tabset\n## HTTPS\n\n``` bash\n# git clone <url> \ngit clone https://github.com/ajpelu/teach_git_ejemplo.git \n```\n\n## SSH\n\n``` bash\n# git clone username@host:/path/to/repository\ngit clone git@github.com:ajpelu/teach_git_ejemplo.git \n```\n:::\n\n## Actualizar un repositorio local\n\n![[Allison_horst](https://github.com/allisonhorst)](images/git-fetch.png)\n\n## Actualizar un repositorio local\n\n::: small\n¿Existe alguna información nueva en mi repositorio remoto?\n:::\n\n``` bash\ngit fetch  \n```\n\n::: small\n¿Existe alguna información nueva en mi repositorio remoto y quiero que esté en mi repositorio local?\n:::\n\n``` bash\ngit pull  \n```\n\n::: callout-warning\n-   Prestar atención a la rama!!\n\n``` bash\ngit pull origin master \n```\n:::\n\n## Otros comandos\n\n![](images/cheat-git.png){fig-align=\"center\"}\n\n## Anexo. Formas de usar git: **shell**\n\n![[Git for Windows](https://gitforwindows.org/)](images/git-for-windows.png){fig-align=\"center\"}\n\n## Anexo. Formas de usar git: **git-GUI**\n\n- Clientes de [git GUI](https://git-scm.com/downloads/guis) (Guest User Interfaces) \n\n![](images/github-desktop.png){fig-align=\"center\"}\n\n## Anexo. Formas de usar git: **R-studio**\n\n\n[https://happygitwithr.com/](https://happygitwithr.com/)\n\n\n<p><a href=\"https://posit.co/resources/videos/happy-git-and-gihub-for-the-user-tutorial/?wvideo=dusx6e0tkp\"><img src=\"https://embed-ssl.wistia.com/deliveries/eaee342e574c4ab3a17685075a50f82c.jpg?image_play_button_size=2x&amp;image_crop_resized=960x540&amp;image_play_button=1&amp;image_play_button_color=71aadbe0\" width=\"400\" height=\"225\" style=\"width: 400px; height: 225px;\"></a></p><p><a href=\"https://posit.co/resources/videos/happy-git-and-gihub-for-the-user-tutorial/?wvideo=dusx6e0tkp\">Happy Git and Gihub for the useR Tutorial - Posit</a></p>\n\n## ¿Alguna duda?\n\n- [@ajpelu](https://twitter.com/ajpelu)\n- [antonio.perez@inia.csic.es](mailto: antonio.perez@inia.csic.es)\n\n\n<small>Ayuda JDC2022-050056-I financiada por MCIN/AEI /10.13039/501100011033 y por la Unión Europea NextGenerationEU/PRTR</small>\n\n![](images/logo-jdc.png){fig-align=\"center\" width=40%}\n\n\n::: {.callout-tip}\n## Si usas esta presentación puedes citarla como:\n<small>**Pérez-Luque, A.J. **(2025). Control de Versiones con Git y GitHub. Material Docente de la Asignatura: Ciclo de Gestión de los Datos. Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad. Universidad de Granada. [https://ecoinfugr.github.io/ecoinformatica/](https://ecoinfugr.github.io/ecoinformatica/) </small>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}