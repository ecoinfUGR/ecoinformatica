{
  "hash": "13277f8a59e388c90184a7892703d58b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidy data\" \nauthor: \n  - name: \"Antonio J. Pérez-Luque\"\n    orcid: 0000-0002-1747-0469\n    email: antonio.perez@inia.csic.es\n    affiliation: Instituto de Ciencias Forestales (CIFOR) | INIA-CSIC (Madrid)\ndate: 2025-01-17\nsesion: 4\nformat: \n  revealjs:\n    auto-stretch: false \n    logo: \"images/logo-ugr.png\"\n    footer: Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad\n    theme: [default, \"../../custom_theme.scss\"] \n    transition: fade\n    background-transition: fade\n    highlight-style: a11y\ncode-link: true\ncrossref:\n  fig-title: Figura     # (default is \"Figure\")\n  tbl-title: Tabla     # (default is \"Table\")\n  title-delim: .     # (default is \":\")\n  fig-prefix: Figura\n  tbl-prefix: Tabla\n  ref-hyperlink: true\n  sec-prefix: \"\"\n  sec-labels: alpha\ncode-annotations: hover\nexecute:\n  echo: true     \n  eval: true     \n  output: true   \n  include: true\n---\n\n\n\n---\n\n![Source: [Julia Lowndes & Allison Horst](https://openscapes.org/blog/2020-10-12-tidy-data/)](images/tidy_intro.jpg){fig-align=\"center\"}\n\n---\n\n![Source: [Wickham & Grolemund](https://r4ds.had.co.nz/tidy-data.html)](images/tidy_data.png){fig-align=\"center\"}\n\n\n# `data.frame` & `tibble`\n\n## `data.frame` \n\n::: small \n- Es la estructura más común para manejar datos tabulares en R\n- Funcionan como una tabla: filas (observaciones) y columnas (variables)\n- Introducidos con el lenguaje base de R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  x = c(1, 2, 3),\n  y = c(\"A\", \"B\", \"C\")\n)\n\ndf \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y\n1 1 A\n2 2 B\n3 3 C\n```\n\n\n:::\n:::\n\n\n\n::: \n\n--- \n\n## `tibble`\n\n::: small \n\n- Versión mejorada de `data.frame` incluida en el pkg **tibble** (**tidyverse**). \n- Diseñados para ser más consistentes y fáciles de usar.\n- Permite manejar variables *no-sintácticas* (a diferencia de R-base). \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\ntb <- tibble(\n  x = c(1, 2, 3),\n  y = c(\"A\", \"B\", \"C\"),\n  `x al cuadrado` = x^2\n) \n\ntb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x y     `x al cuadrado`\n  <dbl> <chr>           <dbl>\n1     1 A                   1\n2     2 B                   4\n3     3 C                   9\n```\n\n\n:::\n:::\n\n\n:::\n\n--- \n\n\n### Diferencias: impresión de datos \n\n::: small \n- `data.frame`:\n    - Imprimen **todas las filas y columnas** por defecto.\n    - Pueden ser difíciles de leer si el conjunto de datos es grande.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y\n1 1 A\n2 2 B\n3 3 C\n```\n\n\n:::\n:::\n\n\n::: \n\n--- \n\n\n### Diferencias: impresión de datos \n\n::: small \n- `tibble`: \n  - Imprimen un **resumen compacto**: muestran las primeras 10 filas y columnas que caben en la consola (se puede modificar, ver [esto](https://es.r4ds.hadley.nz/10-tibble.html#tibbles-vs.-data.frame)). \n  - Formato mas amigable para explorar grandes volúmenes de datos.\n  - Imprimen también la `str()` de los datos\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(tb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n      x y     `x al cuadrado`\n  <dbl> <chr>           <dbl>\n1     1 A                   1\n2     2 B                   4\n3     3 C                   9\n```\n\n\n:::\n:::\n\n\n\n::: \n\n--- \n\n### Diferencias: manejo de tipo de datos\n\n::: small \n- `data.frame`: las columnas de tipo **carácter** se convierten automáticamente a factores, a menos que especifiques `stringsAsFactors = FALSE`.\n\n- `tibble`: nunca convierten caracteres a factores de forma automática.\n\n::: {.panel-tabset}\n### dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(\n  x = c(1, 2, 3),\n  y = c(\"A\", \"B\", \"C\")\n)\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  2 variables:\n $ x: num  1 2 3\n $ y: chr  \"A\" \"B\" \"C\"\n```\n\n\n:::\n:::\n\n\n\n### tibble\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntb <- tibble(\n  x = c(1, 2, 3),\n  y = c(\"A\", \"B\", \"C\")\n)\nstr(tb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [3 × 2] (S3: tbl_df/tbl/data.frame)\n $ x: num [1:3] 1 2 3\n $ y: chr [1:3] \"A\" \"B\" \"C\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: \n\n---\n\n## `data.frame` vs. `tibble`\n\n- **data.frame**: Útiles en scripts básicos o cuando no necesitas integrarte al **tidyverse**.\n- **tibble**: Más consistentes, ideales para trabajar con el **tidyverse** y explorar datos.\n\n\n::: {.callout-note}\n\nPara usar tibble tienes que cargar el paquete [tibble](https://tibble.tidyverse.org/reference/tibble-package.html) que viene por defecto con [tidyverse](https://www.tidyverse.org/packages/) \n\n::: \n\n\n# Generar `tibble`\n\n--- \n\n::: small\n**Transformar `data.frame` a `tibble`**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndft <- as_tibble(df)\ndft\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n      x y    \n  <dbl> <chr>\n1     1 A    \n2     2 B    \n3     3 C    \n```\n\n\n:::\n:::\n\n\n\n::: \n\n--- \n\n::: small\n**Crear `tibble` directamente**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narboles <- tibble(\n  especie = c(\"Pinus halepensis\", \"Quercus ilex\", \"Quercus ilex\", \n              \"Pinus pinaster\", \"Quercus pyrenaica\"),\n  altura_m = c(15, 8, 10, 12, 18),\n  dbh_cm = c(30, 40, 35, 25, 45),\n  site = c(\"plot_A\", \"plot_B\", \"plot_C\", \"plot_A\", \"plot_B\")\n)\n\narboles \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  especie           altura_m dbh_cm site  \n  <chr>                <dbl>  <dbl> <chr> \n1 Pinus halepensis        15     30 plot_A\n2 Quercus ilex             8     40 plot_B\n3 Quercus ilex            10     35 plot_C\n4 Pinus pinaster          12     25 plot_A\n5 Quercus pyrenaica       18     45 plot_B\n```\n\n\n:::\n:::\n\n\n\n:::\n\n--- \n\n::: small\n**Crear `tibble` transpuesto (`t`**`r`**`ibble`)**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narboles <- tribble(\n  ~especie,            ~altura_m, ~dbh_cm, ~site,\n  \"Pinus halepensis\",   15,        30,      \"plot_A\",\n  \"Quercus ilex\",       8,         40,      \"plot_B\",\n  \"Quercus ilex\",       10,        35,      \"plot_C\",\n  \"Pinus pinaster\",     12,        25,      \"plot_A\",\n  \"Quercus pyrenaica\",  18,        45,      \"plot_B\"\n)\narboles \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  especie           altura_m dbh_cm site  \n  <chr>                <dbl>  <dbl> <chr> \n1 Pinus halepensis        15     30 plot_A\n2 Quercus ilex             8     40 plot_B\n3 Quercus ilex            10     35 plot_C\n4 Pinus pinaster          12     25 plot_A\n5 Quercus pyrenaica       18     45 plot_B\n```\n\n\n:::\n:::\n\n\n\n::: \n\n## {footer=false}\n\n::: small \n\n**Crear `tibble` a partir de listas complejas (`enframe`)** \n\n::: {.panel-tabset}\n\n#### Crea tibble\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlista_compleja <- list(\n  numeros = c(1, 2, 3),\n  letras = c(\"A\", \"B\", \"C\"),\n  datos = list(\n    tipo = c(\"x\", \"y\", \"z\"),\n    valores = c(10, 20, 30)\n  )\n)\n\nlc <- enframe(lista_compleja)\nlc \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name    value           \n  <chr>   <list>          \n1 numeros <dbl [3]>       \n2 letras  <chr [3]>       \n3 datos   <named list [2]>\n```\n\n\n:::\n:::\n\n\n\n#### Acceso a datos\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlc \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  name    value           \n  <chr>   <list>          \n1 numeros <dbl [3]>       \n2 letras  <chr [3]>       \n3 datos   <named list [2]>\n```\n\n\n:::\n\n```{.r .cell-code}\nlc[[1]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeros\" \"letras\"  \"datos\"  \n```\n\n\n:::\n\n```{.r .cell-code}\nlc[[2]]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] \"A\" \"B\" \"C\"\n\n[[3]]\n[[3]]$tipo\n[1] \"x\" \"y\" \"z\"\n\n[[3]]$valores\n[1] 10 20 30\n```\n\n\n:::\n:::\n\n\n\n#### Acceso a datos (II)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlc[[2]][1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\nlc[[2]][2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"A\" \"B\" \"C\"\n```\n\n\n:::\n\n```{.r .cell-code}\nlc[[2]][3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[[1]]$tipo\n[1] \"x\" \"y\" \"z\"\n\n[[1]]$valores\n[1] 10 20 30\n```\n\n\n:::\n\n```{.r .cell-code}\nas.data.frame(lc[[2]][3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  tipo valores\n1    x      10\n2    y      20\n3    z      30\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n\n## {footer=false}\n\n::: small \n\n**Crear `tibble` a partir de listas complejas (`enframe`) (II)** \n\n::: {.panel-tabset}\n### Datos forestales \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndatos_forestales <- list(\n  parcela_1 = list(\n    especie = c(\"Pinus halepensis\", \"Quercus ilex\"),\n    n_ind = c(10, 5),\n    dbh_cm = c(25, 30)\n  ),\n  parcela_2 = list(\n    especie = c(\"Pinus pinaster\", \"Quercus pyrenaica\"),\n    n_ind = c(15, 8),\n    dbh_cm = c(20, 35)\n  ),\n  parcela_3 = list(\n    especie = c(\"Pinus sylvestris\"),\n    n_ind = c(12),\n    dbh_cm = c(40)\n  )\n)\n```\n:::\n\n\n\n### Crea tibble\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- enframe(datos_forestales, name = \"parcela\", value = \"contenido\")\nd\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  parcela   contenido       \n  <chr>     <list>          \n1 parcela_1 <named list [3]>\n2 parcela_2 <named list [3]>\n3 parcela_3 <named list [3]>\n```\n\n\n:::\n:::\n\n\n\n### Desagregar \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\nd |> \n  unnest_wider(contenido) |> \n  unnest(c(especie, n_ind, dbh_cm)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  parcela   especie           n_ind dbh_cm\n  <chr>     <chr>             <dbl>  <dbl>\n1 parcela_1 Pinus halepensis     10     25\n2 parcela_1 Quercus ilex          5     30\n3 parcela_2 Pinus pinaster       15     20\n4 parcela_2 Quercus pyrenaica     8     35\n5 parcela_3 Pinus sylvestris     12     40\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: \n\n\n## ¿Alguna duda? \n\n- {{< fa brands bluesky >}} [ajpelu.bsky.social](https://bsky.app/profile/ajpelu.bsky.social)\n\n\n- [antonio.perez@inia.csic.es](mailto: antonio.perez@inia.csic.es)\n\n\n<small>Ayuda JDC2022-050056-I financiada por MCIN/AEI /10.13039/501100011033 y por la Unión Europea NextGenerationEU/PRTR</small>\n\n![](images/logo-jdc.png){fig-align=\"center\" width=40%}\n\n\n::: {.callout-tip}\n## Si usas esta presentación puedes citarla como:\n<small>**Pérez-Luque, A.J. **(2025). Tidy data. Material Docente de la Asignatura: Ciclo de Gestión de los Datos. Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad. Universidad de Granada. [https://ecoinfugr.github.io/ecoinformatica/](https://ecoinfugr.github.io/ecoinformatica/) </small>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}