{
  "hash": "0f17504fc3d9c53eae62642f636ef6a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"El mundo tidyverse\" \nauthor: \n  - name: \"Antonio J. Pérez-Luque\"\n    orcid: 0000-0002-1747-0469\n    email: antonio.perez@inia.csic.es\n    affiliation: Instituto de Ciencias Forestales (CIFOR) | INIA-CSIC (Madrid)\ndate: 2025-01-17\nsesion: 4\nformat: \n  revealjs:\n    auto-stretch: false \n    logo: \"images/logo-ugr.png\"\n    footer: Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad\n    theme: [default, \"../../custom_theme.scss\"] \n    transition: fade\n    background-transition: fade\n    highlight-style: a11y\ncode-link: true\ncrossref:\n  fig-title: Figura     # (default is \"Figure\")\n  tbl-title: Tabla     # (default is \"Table\")\n  title-delim: .     # (default is \":\")\n  fig-prefix: Figura\n  tbl-prefix: Tabla\n  ref-hyperlink: true\n  sec-prefix: \"\"\n  sec-labels: alpha\ncode-annotations: hover\nexecute:\n  echo: true     \n  eval: true     \n  output: true   \n  include: true\n---\n\n\n\n---\n\n![Source: [Julia Lowndes & Allison Horst](https://openscapes.org/blog/2020-10-12-tidy-data/)](images/tidy_intro.jpg){fig-align=\"center\"}\n\n---\n\n![Source: [Wickham & Grolemund](https://r4ds.had.co.nz/tidy-data.html)](images/tidy_data.png){fig-align=\"center\"}\n\n\n--- \n\n\n- **pipe** (tubería) es una técnica de programación que permite encadenar funciones de manera secuencial\n- Permite pasar información de un proceso o comando a otro de manera ordenada y secuencial \n- Es un proceso de comunicación entre los procesos de una sola vía\n- La salida de un proceso se convierte en la entrada del siguiente proceso\n\n\n---\n\n![Source: [Arthur Welle](https://github.com/arthurwelle/VIS/blob/master/Pipe_Cake/Pipe_baking.gif)](images/pipe_baking_r.gif){fig-align=\"center\" width=50%}\n\n--- \n\n## Ejemplo {footer=false}\n\n::: small \n\n::: {.panel-tabset}\n\n### Modo tradicional\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(123) #<< \nx <- runif(10) \nx \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 0.2875775 0.7883051 0.4089769 0.8830174 0.9404673 0.0455565 0.5281055\n [8] 0.8924190 0.5514350 0.4566147\n```\n\n\n:::\n\n```{.r .cell-code}\nx_sort <- sort(x) \nx_log <- log(x_sort) \nx_diff <- diff(x_log) \nx_exp <- exp(x_diff) \nybase <- cumsum(x_exp) \nybase\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6.312546  7.734691  8.851172 10.007739 11.051915 12.481467 13.601614\n[8] 14.612261 15.666101\n```\n\n\n:::\n\n```{.r .cell-code}\n# ybase <- cumsum(exp(diff(log(sort(x)))))\n```\n:::\n\n\n\n\n### Pipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\nypipe <- x |> \n  sort() |>     \n  log() |>      \n  diff() |>    \n  exp() |>      \n  cumsum()\n\nypipe\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6.312546  7.734691  8.851172 10.007739 11.051915 12.481467 13.601614\n[8] 14.612261 15.666101\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: \n\n## Tipos de pipes\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n1. **magrittr** \n\n```{.r}\n%>%\n```\n\n<br> \n```{.r}\nlibrary(magrittr)\n```\n![](images/pipe_magrittr.png){fig-align=\"left\" width=20%}\n\n:::\n\n::: {.column width=\"50%\"}\n2. **R base** \n\n```{.r}\n|> \n```\n:::\n::::\n\n## ¿Cómo incluir pipes en el código? \n\n::: {.callout-tip}\n### Windows\n\n`Ctrl + Shift + M`\n::: \n\n<br>\n\n::: {.callout-tip}\n### Mac\n`Cmd + Shift + M`\n::: \n\n## Mas ejemplos {footer=false} \n\n::: small\n\n- Calcula el histograma de frecuencias del área basal de los diferentes pinos muestrados en una parcela\n\n::: {.panel-tabset} \n\n## Código \n```{.r}\ndbh <- c(5.0, 70.2, 7.0, 95.5, 87.3, 6.8, 65.0, 110.5, 80.5, 120.0) #<1>\n\ndbh_filtrado <- subset(dbh, dbh > 7.5) #<2>\n\narea_basal <- pi * (dbh_filtrado / 200)^2 #<3>\n\nh <- hist(area_basal,\n  main = \"Histograma\", #<4>\n  xlab = expression(\"Área Basal (\" * m^2 * \")\"), #<4>\n  ylab = \"Frecuencia\"\n) #<4>\n\n```\n\n1. Crear un vector de DBH (diámetros en cm)\n2. Filtrar valores de DBH mayores de 7.5 cm\n3. Calcular el área basal (en cm²) para cada valor filtrado\n4. Generar un histograma de las áreas basales\n\n## Gráfico \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](tidy_data_files/figure-revealjs/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n\n\n::: \n\n:::\n\n--- \n\n## Mas ejemplos {footer=false} \n\n::: small\n\n- Calcula el histograma de frecuencias del área basal de los diferentes pinos muestrados en una parcela\n\n::: {.panel-tabset} \n\n## Pipe `%>%` \n```{.r}\nlibrary(magrittr)\ndbh %>%\n  subset(. > 7.5) %>%  \n  {(pi * (. / 200)^2)} %>%                     \n  hist(                                      \n    main = \"magrittr\",\n    xlab = expression(\"Área Basal (\" * m^2 * \")\"),\n    ylab = \"Frecuencia\",\n    col = \"lightblue\"\n  )\n\n```\n\n## Gráfico `%>%` \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](tidy_data_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n\n\n## Pipe `|>` \n```{.r}\ndbh |>\n  (\\(x) subset(x, x > 7.5))() |>\n  (\\(x) pi * (x / 200)^2)() |>\n  hist(\n    main = \"R pipe\",\n    xlab = expression(\"Área Basal (\" * m^2 * \")\"),\n    ylab = \"Frecuencia\",\n    col = \"blue\",\n  )\n```\n\n## Gráfico `|>` \n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](tidy_data_files/figure-revealjs/unnamed-chunk-5-1.png){width=960}\n:::\n:::\n\n\n\n\n::: \n\n:::\n\n--- \n\n## Práctica {footer=false}\n::: small\nCalcular la altura media de los árboles de *Pinus pinaster*  \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\n\npinos <- tibble(\n  id = 1:10,\n  especie = c(\"sylvestris\", \"nigra\", \"pinaster\", \"sylvestris\", \"nigra\",\n              \"pinaster\", \"sylvestris\", \"nigra\", \"pinaster\", \"sylvestris\"),\n  dbh_cm = c(30.5, 6.5, 7.2, 5.0, 28.3, 35.1, 7.0, 6.8, 40.0, 32.7), \n  altura_m = c(12.5, 13.2, 10.0, 9.5, 14.0, 15.0, 8.2, 11.8, 14.5, 12.0) \n)\n\npinos\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n      id especie    dbh_cm altura_m\n   <int> <chr>       <dbl>    <dbl>\n 1     1 sylvestris   30.5     12.5\n 2     2 nigra         6.5     13.2\n 3     3 pinaster      7.2     10  \n 4     4 sylvestris    5        9.5\n 5     5 nigra        28.3     14  \n 6     6 pinaster     35.1     15  \n 7     7 sylvestris    7        8.2\n 8     8 nigra         6.8     11.8\n 9     9 pinaster     40       14.5\n10    10 sylvestris   32.7     12  \n```\n\n\n:::\n:::\n\n\n\n:::\n\n--- \n\n::: {.panel-tabset}\n## Flujo \"clásico\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Encadena funciones \n  \nmean(subset(pinos, especie == \"pinaster\")$altura_m)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.16667\n```\n\n\n:::\n:::\n\n\n<br>\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Crea objetos temporales \npinaster <- pinos[pinos$especie == \"pinaster\", ] \naltura_media_pinaster <- mean(pinaster$altura_m)\naltura_media_pinaster \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.16667\n```\n\n\n:::\n:::\n\n\n\n## Pipe (`magrittr`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(magrittr)\n\naltura_media_pinaster <- pinos %>%\n  subset(especie == \"pinaster\") %>%\n  .$altura_m %>% \n  mean() \n\naltura_media_pinaster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.16667\n```\n\n\n:::\n:::\n\n\n\n## Pipe (R)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naltura_media_pinaster <- \n\npinos |>\n  subset(especie == \"pinaster\") |>\n  (\\(.) mean(.$altura_m))() \n  \n\npinos |>\n  subset(especie == \"pinaster\") |>\n  (\\(data) mean(data$altura_m))() \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13.16667\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## ¿Como podría calcular la altura media por especie? \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(dplyr)\n  \npinos |> \n  group_by(especie) |> \n  summarise(altura_media = mean(altura_m))\n```\n:::\n\n\n\n--- \n\n#### ¿Y solo de aquellos individuos que tengan DBH > 7.5 cm? ¿y cuantos son?\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\npinos |> \n  filter(dbh_cm > 7.5) |>\n  group_by(especie) |> \n  summarise(altura_media = mean(altura_m), \n            n = n())\n```\n:::\n\n\n\n\n\n## Recursos\n\n- [Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst](https://www.openscapes.org/blog/2020/10/12/tidy-data/)\n\n\n\n\n## ¿Alguna duda?\n\n- {{< fa brands bluesky >}} [ajpelu.bsky.social](https://bsky.app/profile/ajpelu.bsky.social)\n\n\n- [antonio.perez@inia.csic.es](mailto: antonio.perez@inia.csic.es)\n\n\n<small>Ayuda JDC2022-050056-I financiada por MCIN/AEI /10.13039/501100011033 y por la Unión Europea NextGenerationEU/PRTR</small>\n\n![](images/logo-jdc.png){fig-align=\"center\" width=40%}\n\n\n::: {.callout-tip}\n## Si usas esta presentación puedes citarla como:\n<small>**Pérez-Luque, A.J. **(2025). Pipe programming. Material Docente de la Asignatura: Ciclo de Gestión de los Datos. Master Universitario en Conservación, Gestión y Restauración de la Biodiversidad. Universidad de Granada. [https://ecoinfugr.github.io/ecoinformatica/](https://ecoinfugr.github.io/ecoinformatica/) </small>\n:::\n",
    "supporting": [
      "tidy_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}